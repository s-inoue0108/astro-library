---
// Reset CSS
import "destyle.css/destyle.min.css";

// Speed insights
import SpeedInsights from "@vercel/speed-insights/astro";

import Header from "../components/common/Header.astro";
import Footer from "../components/common/Footer.astro";
import MenuContent from "../components/blog/large/MenuContent.astro";

// Fonts
import "@fontsource/noto-sans-jp/300.css";
import "@fontsource/noto-sans-jp/400.css";
import "@fontsource/noto-sans-jp/500.css";
import "@fontsource/noto-sans-jp/600.css";
import "@fontsource/noto-sans-jp/700.css";
import "@fontsource/montserrat/300.css";
import "@fontsource/montserrat/400.css";
import "@fontsource/montserrat/500.css";
import "@fontsource/montserrat/600.css";
import "@fontsource/montserrat/700.css";
import "@fontsource/montserrat/300-italic.css";
import "@fontsource/montserrat/400-italic.css";
import "@fontsource/montserrat/500-italic.css";
import "@fontsource/montserrat/600-italic.css";
import "@fontsource/montserrat/700-italic.css";
import "@fontsource/source-code-pro/400.css";
import "@fontsource/source-code-pro/400-italic.css";

interface Props {
	title: string;
	description: string;
}

const { title, description } = Astro.props;

const currentPath = Astro.url.pathname;

// OGP URL
const ogpImageURL = new URL("portfolio-favicon.png", import.meta.env.APP_URL);
---

<!doctype html>
<html lang="ja">
	<head prefix="og: https://ogp.me/ns#">
		<meta charset="UTF-8" />
		<meta name="description" content={description} />
		<meta name="viewport" content="width=device-width" />
		<meta property="og:type" content="website" />
		<meta property="og:url" content={Astro.url} />
		<meta property="og:title" content={title} />
		<meta property="og:image" content={ogpImageURL} />
		<meta name="generator" content={Astro.generator} />
		<meta name="theme-color" media="(prefers-color-scheme: light)" content="#CBD5E1" />
		<meta name="theme-color" media="(prefers-color-scheme: dark)" content="#4B5563" />

		<!--noindex nofollow in preview route-->
		<meta name="robots" content="noindex" />
		<meta name="robots" content="nofollow" />

		<!-- Favicon -->
		<link rel="icon" type="image/png" href="/portfolio-favicon.png" />

		<!--Sitemap -->
		<link rel="sitemap" href="/sitemap-index.xml" />

		<!--title -->
		<title>{title}</title>
	</head>

	<body class="loading-fade scroll-bar">
		<Header />
		<MenuContent />
		<main>
			<slot />
		</main>
		<Footer />

		<!--ダークモード -->
		<script is:inline>
			if (typeof window.localStorage.getItem("theme") === "string") {
				if (window.localStorage.getItem("theme") === "dark") {
					document.documentElement.classList.remove("light");
					document.documentElement.classList.add("dark");
				} else {
					document.documentElement.classList.remove("dark");
					document.documentElement.classList.add("light");
				}
			} else {
				if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
					document.documentElement.classList.remove("light");
					document.documentElement.classList.add("dark");
				} else {
					document.documentElement.classList.remove("dark");
					document.documentElement.classList.add("light");
				}
			}
		</script>

		<SpeedInsights />
	</body>
</html>

<script>
	import { gsap } from "gsap";

	const menuContent = document.querySelector(".menu-content");
	const menu = document.querySelector(".menu");
	const menuBtn = document.getElementById("menu-btn");
	const menuLinks = document.querySelectorAll(".menu-link");

	gsap.set(menuContent, {
		autoAlpha: 0,
	});

	gsap.set(menu, {
		xPercent: -50,
	});

	gsap.set(menuLinks, {
		x: -100,
	});

	const openMenu = gsap
		.timeline({ paused: true })
		.to(menuContent, {
			autoAlpha: 1,
		})
		.to(
			menu,
			{
				autoAlpha: 1,
				xPercent: 0,
				ease: "power4.out",
				duration: 0.3,
			},
			"-=0.5"
		)
		.to(
			menuLinks,
			{
				autoAlpha: 1,
				x: 0,
				ease: "power4.out",
				duration: 0.3,
				stagger: {
					each: 0.05,
				},
			},
			"-=0.5"
		);

	const closeMenu = gsap
		.timeline({ paused: true })
		.to(menuLinks, {
			autoAlpha: 0,
			x: -100,
			ease: "power4.out",
			duration: 0.3,
			stagger: {
				each: 0.05,
				from: "end",
			},
		})
		.to(
			menu,
			{
				autoAlpha: 0,
				xPercent: -50,
				ease: "power4.out",
				duration: 0.3,
			},
			"-=0.3"
		)
		.to(
			menuContent,
			{
				autoAlpha: 0,
			},
			"-=0.3"
		);

	let isOpen: boolean = false;
	menuBtn!.addEventListener("click", async () => {
		if (isOpen) {
			menuContent!.classList.remove("is-open");
			await closeMenu.restart();
		} else {
			menuContent!.classList.add("is-open");
			await openMenu.restart();
		}
		isOpen = !isOpen;
	});
</script>

<style is:global lang="scss">
	html {
		font-family: "Montserrat", "Noto sans JP", "sans-serif";
		scroll-behavior: smooth;
	}

	body {
		width: 100vw;
		overflow-x: hidden;
		line-break: strict;
		word-break: break-word;
		overflow-wrap: break-word;
		word-wrap: break-word;
	}

	.scroll-bar::-webkit-scrollbar {
		background: getColor(--bg-secondary-color);
	}

	.scroll-bar::-webkit-scrollbar-thumb {
		background: getColor(--border-color);
	}

	.loading-fade {
		background: getColor(--bg-secondary-color);
		animation: loading-fade 0.2s ease-in;
	}

	@keyframes loading-fade {
		0% {
			opacity: 0;
		}

		100% {
			opacity: 1;
		}
	}

	main {
		color: getColor(--text-primary-color);
		background: getColor(--bg-primary-color);
		width: 100%;
		min-height: calc(100vh - 36px);
		padding: 1rem;
		padding-top: calc(36px + 1rem);

		@include resp(sm) {
			padding-top: calc(48px + 1rem);
			min-height: calc(100vh - 40px);
		}

		@include resp(lg) {
			padding-top: calc(64px + 1rem);
			min-height: calc(100vh - 44px);
			padding: 1rem 3rem;
		}

		#readme {
			h1 {
				width: 100%;
				border-image: tropicGradient(0deg) 1;
				border-bottom: solid 4px;
				padding-left: 0.4rem;
				padding-bottom: 0.2rem;
				font-size: 1.2rem;
				font-weight: 700;
				letter-spacing: 1px;
				margin: 2.5rem 0;
				white-space: nowrap;

				@include resp(sm) {
					font-size: 1.5rem;
					letter-spacing: 1.4px;
				}

				@include resp(lg) {
					font-size: 2.2rem;
					letter-spacing: 2px;
					padding-left: 0.8rem;
					padding-bottom: 0.3rem;
					border-bottom: solid 6px;
					margin: 4rem 0;
				}
			}

			h2 {
				border-image: tropicGradient(90deg) 1;
				border-left: solid 8px;
				padding-left: 0.5rem;
				font-size: 1.1rem;
				font-weight: 700;
				letter-spacing: 1px;
				margin: 2rem 0;

				@include resp(lg) {
					font-size: 1.5rem;
					border-left: solid 12px;
					margin: 3rem 0;
					padding-left: 1rem;
				}
			}

			h3 {
				font-weight: 700;
				letter-spacing: 1px;
				margin: 1.5rem 0;

				@include resp(lg) {
					font-size: 1.2rem;
					margin: 2rem 0;
				}
			}

			p {
				font-weight: 400;
				line-height: 1.8rem;

				@include resp(lg) {
					font-size: 1.2rem;
					line-height: 2.4rem;
				}
			}

			a:not([href*="#fn"]) {
				font-weight: 500;
				color: $sky;
				align-items: center;

				&:active {
					opacity: 0.5;
					transition: 0.2s ease;
				}

				&:visited {
					color: $violet;
				}
			}

			a[href*="#fn"] {
				color: getColor(--text-secondary-color);

				&:active {
					opacity: 0.5;
					transition: 0.2s ease;
				}
			}

			blockquote {
				margin: 1rem 0;
				width: 100%;
				padding: 0.5rem 1rem;
				border-left: solid 8px getColor(--border-color);
				background: getColor(--bg-secondary-color);

				@include resp(lg) {
					border-left-width: 12px;
					padding: 0.6rem 1.2rem;
				}
			}

			ul {
				width: 100%;
				display: block;
				padding: 1rem 0 1rem 1rem;

				@include resp(lg) {
					font-size: 1.2rem;
					padding: 1.5rem 0 1.5rem 1.5rem;
				}

				li {
					list-style: disc;
					padding: 0.3rem 0;
					line-height: 1.8rem;

					@include resp(lg) {
						padding: 0.5rem 0;
						line-height: 2.4rem;
					}
				}
			}

			ol {
				width: 100%;
				display: block;
				padding: 1rem 0 1rem 1rem;

				@include resp(lg) {
					font-size: 1.2rem;
					padding: 1.5rem 0 1.5rem 1.5rem;
				}

				li {
					list-style: decimal;
					padding: 0.3rem 0;
					line-height: 1.8rem;

					@include resp(lg) {
						line-height: 2.4rem;
					}

					&::marker {
						font-weight: 600;
					}
				}
			}

			dl {
				width: 100%;
				display: block;
				padding: 1rem 0 1rem 1rem;

				@include resp(lg) {
					font-size: 1.2rem;
					padding: 1.5rem 0 1.5rem 1.5rem;
				}

				dt {
					padding-top: 1rem;

					@include resp(lg) {
						padding-top: 1.2rem;
					}
				}

				dd {
					padding: 1rem 0 0 2rem;
					line-height: 1.8rem;

					@include resp(lg) {
						padding: 1.2rem 0 0 2.4rem;
						line-height: 2.4rem;
					}
				}
			}

			.footnote-item::marker {
				color: getColor(--text-secondary-color);
			}

			table {
				margin: auto;
				display: block;
				max-width: 100%;
				overflow-x: auto;
				white-space: nowrap;
				border-collapse: collapse;
				padding-bottom: 1rem;

				th,
				td {
					width: 1px;
					min-width: 4rem;
					border: solid 1px getColor(--border-color);
					padding: 0.5rem;
				}

				th {
					text-align: center;
				}

				td {
					background: getColor(--bg-secondary-color);
				}
			}

			code {
				color: getColor(--text-secondary-color);
				font-family: "Source Code Pro", Consolas, monospace;
				font-size: 0.9rem;
				padding: 0.2rem 0.5rem;
				border-radius: 4px;
				@include resp(lg) {
					font-size: 1.1rem;
				}
			}

			pre {
				display: block;
				width: 100%;
				height: max-content;
				margin-bottom: 1rem;
				padding: 1rem;
				overflow-x: auto;
				border-radius: 4px;

				code {
					font-size: 0.9rem;
					line-height: 1.2rem;
					padding: 0;
					color: getColor(--text-primary-color);

					@include resp(lg) {
						font-size: 1.1rem;
						line-height: 1.4rem;
					}
				}

				@include resp(lg) {
					margin-bottom: 2rem;
				}
			}

			pre::-webkit-scrollbar {
				background: getColor(--bg-secondary-color);
			}

			pre::-webkit-scrollbar-thumb {
				background: getColor(--border-color);
				border-radius: 9999px;
			}

			hr {
				border-color: getColor(--border-color);
				margin: 1rem 0;

				@include resp(lg) {
					margin: 2rem 0;
				}
			}

			img {
				width: 100%;
				max-height: 256px;
				object-fit: contain;
				border-radius: 4px;

				@include resp(lg) {
					max-height: 512px;
					border-radius: 8px;
				}
			}
		}
	}
</style>
