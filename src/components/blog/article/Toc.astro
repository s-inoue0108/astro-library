---
import Modal from "../../common/modal/ToggleableModal.vue";
import { svgPaths, svgViewBoxes } from "../../../lib/svg/paths";

interface Props {
	headings: {
		text: string;
		lev: string;
		h1id?: number;
	}[];
}

const { headings } = Astro.props;
---

<Modal title="Contents" svgIconPath={svgPaths.listUl} svgViewBox={svgViewBoxes.listUl} client:visible>
	<ul class="headings">
		{
			headings.map((h) => {
				return (
					<li class="heading">
						{() => {
							if (h.lev === "h1") {
								return (
									<a id={`toc-${h.lev}-${h.text}`} href={`#${h.text}`} class="toc-h1">
										{h.text !== "脚注" ? (
											<span class="before">{h.h1id}</span>
										) : (
											<span class="before">
												<svg xmlns="http://www.w3.org/2000/svg" viewBox={svgViewBoxes.lightbulb}>
													<path d={svgPaths.lightbulb} />
												</svg>
											</span>
										)}
										{h.text}
									</a>
								);
							} else if (h.lev === "h2") {
								return (
									<a id={`toc-${h.lev}-${h.text}`} href={`#${h.text}`} class="toc-h2">
										<span class="before" />
										{h.text}
									</a>
								);
							} else {
								return (
									<a id={`toc-${h.lev}-${h.text}`} href={`#${h.text}`} class="toc-h-else">
										{h.text}
									</a>
								);
							}
						}}
					</li>
				);
			})
		}
		<li class="heading">
			<a id="toc-h1-rel-articles" href="#rel-articles" class="toc-h1">
				<span class="before">
					<svg xmlns="http://www.w3.org/2000/svg" viewBox={svgViewBoxes.penNib}>
						<path d={svgPaths.penNib}></path>
					</svg>
				</span>
				関連記事
			</a>
		</li>
	</ul>
</Modal>

<script>
	import { load } from "cheerio";
	import { getDiffOffsets } from "../../../lib/cheerio/func";

	const $ = load(document.getElementById("article-content")!.innerHTML);

	let diffOffsets = await getDiffOffsets($);

	let windowWidth = window.innerWidth;
	window.addEventListener("resize", async () => {
		if (windowWidth !== window.innerWidth) {
			windowWidth = window.innerWidth;
			diffOffsets = await getDiffOffsets($);
		}
	});
</script>

<style lang="scss">
	.headings {
		display: flex;
		flex-direction: column;
		gap: 1rem;
		max-height: 256px;
		overflow-y: auto;

		@include resp(lg) {
			max-height: 80vh;
		}

		.heading {
			.toc-h1 {
				max-width: 100%;
				font-size: 1.2rem;
				font-weight: 600;
				display: inline-flex;
				align-items: center;
				gap: 0.5rem;

				.before {
					display: inline-block;
					width: 1.4rem;
					height: 1.4rem;
					background: $tropic-gradient;
					font-size: 1rem;
					border-radius: 9999px;
					text-align: center;
					padding: 0.15rem;
					position: relative;

					svg {
						position: absolute;
						top: 50%;
						left: 50%;
						transform: translate(-50%, -50%);
						width: 60%;
						height: 60%;
						fill: getColor(--text-primary-color);
					}
				}
			}

			.toc-h2 {
				max-width: 100%;
				margin-left: 1.4rem;
				font-weight: 400;
				display: inline-flex;
				align-items: center;
				gap: 0.5rem;

				.before {
					display: inline-block;
					width: 0.5rem;
					height: 0.5rem;
					background: getColor(--text-primary-color);
					border-radius: 9999px;
				}
			}

			.toc-h-else {
				max-width: 100%;
				margin-left: 2.4rem;
				font-size: 0.8rem;
			}

			a {
				&:active {
					text-decoration: underline;
					transition: 0.2s ease;
				}
			}
		}
	}

	.headings::-webkit-scrollbar {
		background: getColor(--bg-secondary-color);
	}

	.headings::-webkit-scrollbar-thumb {
		background: getColor(--border-color);
		border-radius: 9999px;
	}
</style>
