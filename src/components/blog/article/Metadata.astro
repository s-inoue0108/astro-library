---
import type { Article } from "../../../lib/newt/types";
import TagCard from "../card/TagCard.vue";
// Image
import { Image } from "astro:assets";
// SVG
import { svgPaths, svgViewBoxes } from "../../../lib/svg/paths";

interface Props {
	metadata: Pick<Article, "title" | "description" | "thambnail" | "category" | "tags" | "_sys">;
}

const { metadata } = Astro.props;
const { title, description, thambnail, category, tags, _sys } = metadata;
---

<div class="metadata">
	<div class="image">
		<Image
			src={thambnail.src}
			width={thambnail.width}
			height={thambnail.height}
			alt={thambnail.altText}
			class="thambnail"
		/>
		<a href={`/blog/category/${category.slug}/1`} class="category">
			<svg
				xmlns="http://www.w3.org/2000/svg"
				viewBox={category.svgViewBox}
				fill={category.themeColor}
			>
				<path d={category.svgIconPath}></path>
			</svg>
			<h2>{category.name}</h2>
		</a>
		<ul class="tags">
			{
				tags &&
					tags.length > 0 &&
					tags.map((tag) => {
						return (
							<li class="tag">
								<TagCard tag={tag} />
							</li>
						);
					})
			}
		</ul>
	</div>
	<div class="info">
		<a href="/blog/all/1" class="all">
			<svg xmlns="http://www.w3.org/2000/svg" viewBox={svgViewBoxes.chevronLeft}>
				<path d={svgPaths.chevronLeft}></path>
			</svg>
			<span>記事一覧</span>
		</a>
		<ul class="dates">
			<li class="date">
				<svg xmlns="http://www.w3.org/2000/svg" viewBox={svgViewBoxes.clock}>
					<path d={svgPaths.clock}></path>
				</svg>
				<span
					>{
						new Intl.DateTimeFormat("ja").format(
							new Date(_sys.raw.firstPublishedAt ?? _sys.createdAt)
						)
					}</span
				>
			</li>
			{
				_sys.raw.publishedAt && (
					<li class="date">
						<svg xmlns="http://www.w3.org/2000/svg" viewBox={svgViewBoxes.clockRotateLeft}>
							<path d={svgPaths.clockRotateLeft} />
						</svg>
						<span>{new Intl.DateTimeFormat("ja").format(new Date(_sys.raw.publishedAt))}</span>
					</li>
				)
			}
		</ul>
	</div>
	<h1 class="title">{title}</h1>
	<p class="description">{description}</p>
</div>

<style lang="scss">
	.metadata {
		width: 100%;

		@include resp(lg) {
			width: 70%;
			margin: 96px 0 0 1.5rem;
			padding-right: 1rem;
		}

		.title {
			font-size: 1.6rem;
			font-weight: 600;
			letter-spacing: 0.8px;
			margin-top: 2rem;
			line-height: 2rem;

			@include resp(lg) {
				font-size: 2.8rem;
				letter-spacing: 1px;
				margin-top: 3rem;
				margin-left: -1rem;
				line-height: 3.6rem;
			}
		}

		.description {
			color: getColor(--text-secondary-color);
			margin-top: 1.5rem;
			margin-bottom: 2rem;
			line-height: 1.4rem;

			@include resp(lg) {
				font-size: 1.6rem;
				letter-spacing: 0.8px;
				margin-left: -1rem;
				line-height: 2rem;
			}
		}

		.info {
			margin-top: 0.5rem;
			display: flex;
			justify-content: space-between;
			align-items: center;

			@include resp(lg) {
				margin-left: -1rem;
				margin-right: 1rem;
			}

			.all {
				color: getColor(--text-secondary-color);
				font-size: 0.8rem;
				display: flex;
				align-items: center;
				gap: 0.3rem;
				letter-spacing: 0.5px;

				@include resp(lg) {
					font-size: 1.1rem;
					letter-spacing: 0.8px;
				}

				&:active {
					color: $rose;
					transition: 0.2s ease;

					svg {
						fill: $rose;
					}
				}

				svg {
					width: auto;
					height: 0.8rem;
					fill: getColor(--text-secondary-color);

					@include resp(lg) {
						height: 1.2rem;
					}
				}
			}

			.dates {
				display: flex;
				align-items: center;
				gap: 1rem;

				@include resp(lg) {
					gap: 1.5rem;
				}

				.date {
					color: getColor(--text-primary-color);
					font-size: 0.8rem;
					display: flex;
					align-items: center;
					gap: 0.3rem;
					letter-spacing: 0.5px;

					@include resp(lg) {
						font-size: 1.1rem;
						letter-spacing: 0.8px;
					}

					svg {
						width: auto;
						height: 0.7rem;
						fill: getColor(--text-primary-color);

						@include resp(lg) {
							height: 1rem;
						}
					}
				}
			}
		}

		.image {
			margin: 0 -1rem;
			margin-top: -16px;
			width: 100vw;
			height: 192px;
			position: relative;

			@include resp(lg) {
				width: 100%;
				height: 384px;
			}

			.thambnail {
				position: absolute;
				width: 100%;
				height: 100%;
				object-fit: cover;

				@include resp(lg) {
					border-radius: 4px;
				}
			}

			.tags {
				position: absolute;
				bottom: 4px;
				left: 4px;
				display: flex;
				flex-wrap: wrap;
				align-items: center;
				gap: 0.3rem;
			}

			.category {
				position: absolute;
				top: 0;
				left: 0;
				display: flex;
				align-items: center;
				gap: 0.5rem;
				padding: 0.5rem;
				background: getColor(--bg-primary-color, 0.5);
				border-bottom-right-radius: 4px;

				h2 {
					font-size: 1.2rem;
					font-weight: 600;
					letter-spacing: 0.8px;
				}

				svg {
					width: auto;
					height: 1.2rem;
				}
			}
		}
	}
</style>
