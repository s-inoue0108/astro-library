---
import ThemeButton from "./buttons/Theme.vue";
import MenuButton from "./buttons/Menu.vue";
import { svgPaths, svgViewBoxes } from "../../lib/svg/paths";

const title = import.meta.env.APP_NAME;
const currentPath = Astro.url.pathname;

const getIsCurrent = (pathName: string, exceptionPath?: string): boolean => {
	const regex = new RegExp(`\^/${pathName}\(\?\!${exceptionPath}\)`);
	return regex.test(currentPath);
};

const isBlog = getIsCurrent("blog", "/search");
const isSearch = getIsCurrent("blog/search");
const isProfile = getIsCurrent("profile");
const isDocument = getIsCurrent("document");
---

<header>
	<ul class="container">
		<a href="/" class="app-title">
			{
				[...title].map((char) => {
					return char !== " " ? <span class="char">{char}</span> : <span class="char">&nbsp;</span>;
				})
			}
		</a>
		<ul class="page-links">
			<li class="link">
				<a href="/blog/search" class:list={{ "bg-inversion": isSearch }}>
					<svg
						xmlns="http://www.w3.org/2000/svg"
						viewBox={svgViewBoxes.magnifyingGlass}
						class:list={{ "fill-inversion": isSearch }}
					>
						<path d={svgPaths.magnifyingGlass}></path>
					</svg>
					<span>検索</span>
				</a>
			</li>
			<li class="link">
				<a href="/blog/all/1" class:list={{ "bg-inversion": isBlog }}>
					<svg
						xmlns="http://www.w3.org/2000/svg"
						viewBox={isBlog ? svgViewBoxes.penNib : svgViewBoxes.caretRight}
						class:list={{ "fill-inversion": isBlog }}
					>
						<path d={isBlog ? svgPaths.penNib : svgPaths.caretRight}></path>
					</svg>
					<span>ブログ</span>
				</a>
			</li>
			<li class="link">
				<a href="/profile" class:list={{ "bg-inversion": isProfile }}>
					<svg
						xmlns="http://www.w3.org/2000/svg"
						viewBox={isProfile ? svgViewBoxes.user : svgViewBoxes.caretRight}
						class:list={{ "fill-inversion": isProfile }}
					>
						<path d={isProfile ? svgPaths.user : svgPaths.caretRight}></path>
					</svg>
					<span>プロフィール</span>
				</a>
			</li>
			<li class="link">
				<a href="/document/1" class:list={{ "bg-inversion": isDocument }}>
					<svg
						xmlns="http://www.w3.org/2000/svg"
						viewBox={isDocument ? svgViewBoxes.folder : svgViewBoxes.caretRight}
						class:list={{ "fill-inversion": isDocument }}
					>
						<path d={isDocument ? svgPaths.folder : svgPaths.caretRight}></path>
					</svg>
					<span>ドキュメント</span>
				</a>
			</li>
		</ul>
		<ul class="btns">
			<ThemeButton client:load />
			<MenuButton client:load />
		</ul>
	</ul>
</header>

<script>
	import { gsap } from "gsap";

	const title = document.querySelectorAll(".char");
	const menuContent = document.querySelector(".menu-content");
	const menuBtn = document.getElementById("menu-btn");
	const menuLinks = document.querySelectorAll(".menu-link");

	gsap.set(menuContent, {
		autoAlpha: 0,
	});

	gsap.set(menuLinks, {
		x: -100,
	});

	const openMenu = gsap
		.timeline({ paused: true })
		.to(menuContent, {
			autoAlpha: 1,
		})
		.to(
			menuLinks,
			{
				autoAlpha: 1,
				x: 0,
				ease: "power4.out",
				duration: 0.3,
				stagger: {
					each: 0.05,
				},
			},
			"-=0.5"
		);

	const closeMenu = gsap
		.timeline({ paused: true })
		.to(menuLinks, {
			autoAlpha: 0,
			x: -100,
			ease: "power4.out",
			duration: 0.3,
			stagger: {
				each: 0.05,
				from: "end",
			},
		})
		.to(
			menuContent,
			{
				autoAlpha: 0,
			},
			"-=0.3"
		);

	let isOpen: boolean = false;
	menuBtn!.addEventListener("click", async () => {
		if (isOpen) {
			menuContent!.classList.remove("is-open");
			await closeMenu.restart();
		} else {
			menuContent!.classList.add("is-open");
			await openMenu.restart();
		}
		isOpen = !isOpen;
	});

	gsap.set(title, {
		y: 100,
	});

	gsap.to(title, {
		y: 0,
		ease: "power4.out",
		stagger: {
			each: 0.05,
		},
	});
</script>

<style lang="scss">
	header {
		position: relative;
		width: 100vw;
		height: 36px;
		padding: 0 12px;
		background: getColor(--bg-primary-color, 0.9);
		position: fixed;
		top: 0;
		z-index: 9999;

		@include resp(sm) {
			height: 48px;
			padding: 0 24px;
		}

		@include resp(lg) {
			height: 64px;
			padding: 0 48px;
		}

		.container {
			width: 100%;
			height: 100%;
			display: flex;
			justify-content: space-between;
			align-items: center;
			position: relative;
		}

		.app-title {
			font-size: 1rem;
			font-weight: 700;
			letter-spacing: 0.5px;
			overflow-y: hidden;

			@include resp(lg) {
				font-size: 1.8rem;
				letter-spacing: 1px;
			}

			.char {
				display: inline-block;
				color: getColor(--text-primary-color);
			}
		}

		.page-links {
			display: none;
			position: absolute;
			top: 50%;
			right: 12rem;
			transform: translateY(-50%);

			@include resp(lg) {
				display: flex;
				align-items: center;
				gap: 2rem;
			}

			.link {
				font-size: 1rem;
				font-weight: 600;
				letter-spacing: 1px;
				color: getColor(--text-primary-color);

				a {
					padding: 0.5rem 1rem;
					border-radius: 9999px;
					display: flex;
					align-items: center;
					gap: 0.5rem;
					height: 100%;
					white-space: nowrap;
					fill: getColor(--text-primary-color);

					&:hover {
						opacity: 0.5;
						transition: 0.2s all;
					}

					svg {
						height: 1rem;
					}
				}
			}
		}

		.btns {
			display: flex;
			align-items: center;
			gap: 1rem;

			@include resp(lg) {
				gap: 3rem;
			}
		}
	}

	.bg-inversion {
		color: getColor(--text-inversion-color);
		background: getColor(--bg-inversion-color);
	}

	.fill-inversion {
		fill: getColor(--text-inversion-color);
	}
</style>
