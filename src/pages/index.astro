---
import IndexLayout from "../layouts/IndexLayout.astro";
import { svgPaths, svgViewBoxes } from "../lib/svg/paths";
// Image
import { Image } from "astro:assets";
// HeaderImage
import HeaderImage from "../images/common/portfolio-favicon.png";
// Zenn Logo
import ZennLogo from "../images/common/zenn-logo.svg";
// ThemeButton
import ThemeButton from "../components/common/buttons/Theme.vue";
// MenuButton
import MenuButton from "../components/common/buttons/Menu.vue";
// Categories
import { categories } from "../lib/newt/instance";

const date = new Date();
const year = date.getFullYear();
---

<IndexLayout title={`ホーム | ${import.meta.env.APP_NAME}`} description="ホーム">
	<div class="curtains">
		<Image src={HeaderImage} alt={import.meta.env.APP_NAME} class="header-img" />
		<div class="shape-div-top">
			<svg
				data-name="Layer 1"
				xmlns="http://www.w3.org/2000/svg"
				viewBox="0 0 1200 120"
				preserveAspectRatio="none"
			>
				<path d="M1200 120L0 16.48 0 0 1200 0 1200 120z" class="shape-fill-top"></path>
			</svg>
			<div class="menu-button">
				<MenuButton scale={4.8} client:load />
			</div>
		</div>

		<div class="shape-div-bottom">
			<svg
				data-name="Layer 1"
				xmlns="http://www.w3.org/2000/svg"
				viewBox="0 0 1200 120"
				preserveAspectRatio="none"
			>
				<path d="M1200 120L0 16.48 0 0 1200 0 1200 120z" class="shape-fill-bottom"></path>
			</svg>
			<ul class="external-links">
				<li class="external-link">
					<a href={import.meta.env.X_URL} target="_blank" rel="noopener noreferrer">
						<svg xmlns="http://www.w3.org/2000/svg" viewBox={svgViewBoxes.xTwitter}>
							<path d={svgPaths.xTwitter}></path>
						</svg>
					</a>
				</li>
				<li class="external-link">
					<a href={import.meta.env.GITHUB_URL} target="_blank" rel="noopener noreferrer">
						<svg xmlns="http://www.w3.org/2000/svg" viewBox={svgViewBoxes.github}>
							<path d={svgPaths.github}></path>
						</svg>
					</a>
				</li>
				<li class="external-link">
					<a href={import.meta.env.ZENN_URL} target="_blank" rel="noopener noreferrer">
						<Image src={ZennLogo} alt="Zenn" />
					</a>
				</li>
			</ul>
			<h6 class="copyright">
				&copy; {year} Shota Inoue
			</h6>
		</div>
	</div>
	<h1 class="title">
		<span>Shota Inoue</span>
		<span>Web Library</span>
	</h1>
	<div class="theme-button">
		<ThemeButton scale={2.4} client:load />
	</div>
	<nav class="menu-content">
		<h1 class="menu">MENU</h1>
		<div class="menu-flex">
			<ul class="menu-links">
				<li class="menu-link">
					<a href="/blog/all/1">
						<svg xmlns="http://www.w3.org/2000/svg" viewBox={svgViewBoxes.caretRight}>
							<path d={svgPaths.caretRight}></path>
						</svg>
						ブログ
					</a>
				</li>
				<li class="menu-link">
					<ul class="category-links">
						{
							categories &&
								categories.map((category) => {
									return (
										<li class="category-link">
											<a href={`/blog/category/${category.slug}/1`}>
												<svg xmlns="http://www.w3.org/2000/svg" viewBox={category.svgViewBox}>
													<path d={category.svgIconPath} />
												</svg>
												{category.name}
											</a>
										</li>
									);
								})
						}
					</ul>
				</li>
				<li class="menu-link">
					<a href="/profile">
						<svg xmlns="http://www.w3.org/2000/svg" viewBox={svgViewBoxes.caretRight}>
							<path d={svgPaths.caretRight}></path>
						</svg>
						プロフィール
					</a>
				</li>
				<li class="menu-link">
					<a href="/privacy-policy">
						<svg xmlns="http://www.w3.org/2000/svg" viewBox={svgViewBoxes.caretRight}>
							<path d={svgPaths.caretRight}></path>
						</svg>
						プライバシーポリシー
					</a>
				</li>
				<li class="menu-link">
					<a href="/contact">
						<svg xmlns="http://www.w3.org/2000/svg" viewBox={svgViewBoxes.caretRight}>
							<path d={svgPaths.caretRight}></path>
						</svg>
						お問い合わせ
					</a>
				</li>
			</ul>
		</div>
	</nav>
</IndexLayout>

<script>
	// GSAP
	import { gsap } from "gsap";

	const headerImg = document.querySelector(".header-img");
	const title = document.querySelector(".title");
	const curtains = document.querySelector(".curtains");
	const themeButton = document.querySelector(".theme-button");
	const menuContent = document.querySelector(".menu-content");
	const menu = document.querySelector(".menu");
	const menuBtn = document.getElementById("menu-btn");
	const menuLinks = document.querySelectorAll(".menu-link");

	const gradient = (target: any) => {
		const timeline = gsap.timeline({ repeat: -1 });
		timeline.to(target, {
			backgroundImage:
				"linear-gradient(1turn, rgb(251 191 36), rgb(251 146 60) 50%, rgb(251 113 133))",
			duration: 6,
		});

		return timeline;
	};

	gsap
		.timeline()
		.from(headerImg, {
			autoAlpha: 0,
			duration: 0.8,
			ease: "power3.out",
		})
		.to(headerImg, {
			autoAlpha: 0,
			duration: 0.5,
			delay: 0.3,
			ease: "power4.in",
		})
		.to(curtains, {
			yPercent: -100,
			duration: 1,
			delay: 0.2,
			ease: "power3.out",
		})
		.from(
			title,
			{
				yPercent: 60,
				autoAlpha: 0,
				duration: 0.8,
				ease: "power3.out",
			},
			"-=0.7"
		)
		.from(
			themeButton,
			{
				autoAlpha: 0,
				xPercent: 300,
				duration: 0.5,
				ease: "power3.out",
			},
			"-=0.4"
		)
		.add(gradient(title), "-=1.5");

	gsap.set(menuContent, {
		autoAlpha: 0,
	});

	gsap.set(menu, {
		xPercent: -50,
	});

	gsap.set(menuLinks, {
		x: -100,
	});

	const openMenu = gsap
		.timeline({ paused: true })
		.to(menuContent, {
			autoAlpha: 1,
		})
		.to(
			menu,
			{
				autoAlpha: 1,
				xPercent: 0,
				ease: "power4.out",
				duration: 0.3,
			},
			"-=0.5"
		)
		.to(
			menuLinks,
			{
				autoAlpha: 1,
				x: 0,
				ease: "power4.out",
				duration: 0.3,
				stagger: {
					each: 0.05,
				},
			},
			"-=0.5"
		);

	const closeMenu = gsap
		.timeline({ paused: true })
		.to(menuLinks, {
			autoAlpha: 0,
			x: -100,
			ease: "power4.out",
			duration: 0.3,
			stagger: {
				each: 0.05,
				from: "end",
			},
		})
		.to(
			menu,
			{
				autoAlpha: 0,
				xPercent: -50,
				ease: "power4.out",
				duration: 0.3,
			},
			"-=0.3"
		)
		.to(
			menuContent,
			{
				autoAlpha: 0,
			},
			"-=0.3"
		);

	let isOpen: boolean = false;
	menuBtn!.addEventListener("click", async () => {
		if (isOpen) {
			await closeMenu.restart();
		} else {
			await openMenu.restart();
		}
		isOpen = !isOpen;
	});
</script>

<style scoped lang="scss">
	.shape-div-top {
		position: absolute;
		bottom: -150px;
		left: 0;
		width: 100%;
		overflow: hidden;
		line-height: 0;

		svg {
			position: relative;
			display: block;
			width: calc(100% + 1.3px);
			height: 160px;
		}

		@include resp(lg) {
			bottom: -230px;
			svg {
				height: 240px;
			}
		}
	}

	.shape-div-top .shape-fill-top {
		fill: $rose;
	}

	.shape-div-bottom {
		position: absolute;
		bottom: calc(-100svh - 10px);
		left: 0;
		width: 100%;
		overflow: hidden;
		line-height: 0;
		transform: rotate(180deg);

		svg {
			position: relative;
			display: block;
			width: calc(100% + 1.3px);
			height: 160px;
		}

		@include resp(lg) {
			svg {
				height: 240px;
			}
		}
	}

	.shape-div-bottom .shape-fill-bottom {
		fill: getColor(--theme-color);
	}

	.curtains {
		position: absolute;
		top: 0;
		left: 0;
		width: 100vw;
		height: 100vh;
		background: $tropic-gradient-to-below;
		z-index: 300;

		.header-img {
			position: absolute;
			top: 50%;
			left: 50%;
			transform: translate(-50%, -50%);
			width: 128px;
			height: auto;
			object-fit: contain;
			border-radius: 16px;
			margin: auto;
			box-shadow: 8px 8px 8px $black;

			@include resp(lg) {
				width: 256px;
				height: auto;
				border-radius: 24px;
				box-shadow: 24px 24px 24px $black;
			}
		}
	}

	.title {
		position: fixed;
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
		display: flex;
		flex-direction: column;
		align-items: center;
		gap: 1.4rem;

		font-size: 2.8rem;
		font-weight: 700;
		letter-spacing: 1.5px;
		white-space: nowrap;
		background-image: $tropic-gradient-to-above;
		background-clip: text;
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;

		@include resp(lg) {
			gap: 2.8rem;
			font-size: 6rem;
			letter-spacing: 6px;
		}
	}

	.menu-button {
		position: absolute;
		top: 1rem;
		right: 1rem;
	}

	.menu-content {
		width: 100%;
		height: 100%;
		position: fixed;
		top: 0;
		left: 0;
		z-index: 100;
	}

	.menu {
		color: $rose;
		position: fixed;
		top: calc(150px - 3rem);
		left: 1rem;
		z-index: 101;
		font-size: 3rem;
		font-weight: 700;
		letter-spacing: 1px;

		@include resp(lg) {
			top: calc(230px - 3rem);
		}
	}

	.menu-flex {
		background: getColor(--bg-primary-color);
		height: 100svh;
		padding: calc(150px + 1.5rem) 1.5rem;

		@include resp(lg) {
			padding: calc(230px + 1.5rem) 1.5rem;
		}

		.menu-links {
			display: flex;
			flex-direction: column;
			align-items: start;
			gap: 1.6rem;

			.menu-link {
				font-size: 1.5rem;
				font-weight: 600;
				letter-spacing: 1px;

				a {
					display: flex;
					align-items: center;
					gap: 1rem;
					height: 1.5rem;
					white-space: nowrap;

					svg {
						height: 100%;
						fill: getColor(--text-primary-color);
					}
				}
			}
		}

		.category-links {
			display: flex;
			flex-direction: column;
			gap: 0.8rem;
			height: 8.3rem;
			overflow-y: auto;
			padding-left: 1rem;

			.category-link {
				font-size: 1rem;
				font-weight: 300;
				letter-spacing: 1px;

				a {
					display: flex;
					align-items: center;
					gap: 0.8rem;
					height: 1rem;
					white-space: nowrap;

					svg {
						width: 1rem;
						fill: getColor(--text-primary-color);
					}
				}
			}
		}
	}

	.external-links {
		rotate: calc(180deg);
		position: absolute;
		top: 1rem;
		right: 1rem;

		display: flex;
		align-items: center;
		gap: 1rem;

		@include resp(lg) {
			gap: 1.6rem;
		}

		.external-link {
			width: 1.2rem;
			height: 1.2rem;

			@include resp(lg) {
				width: 2rem;
				height: 2rem;
			}

			img {
				width: 100%;
				height: 100%;
				object-fit: contain;
			}

			svg {
				width: 100%;
				height: 100%;
				fill: getColor(--bg-primary-color);
			}
		}
	}

	.copyright {
		rotate: 180deg;
		font-size: 0.8rem;
		color: getColor(--bg-primary-color);
		position: absolute;
		top: 1.5rem;
		right: 50%;
		transform: translateX(-50%);

		@include resp(sm) {
			font-size: 0.9rem;
		}

		@include resp(lg) {
			font-size: 1rem;
		}
	}

	.theme-button {
		position: fixed;
		bottom: 3rem;
		right: 1rem;
		z-index: 1000;
	}
</style>
