---
import Layout from "../layouts/Layout.astro";
import SvgButton from "../components/common/buttons/Svg.vue";
import { svgPaths, svgViewBoxes } from "../lib/svg/paths";
// Image
import { Image } from "astro:assets";
// HeaderImage
import HeaderImage from "../images/common/portfolio-favicon.png";
---

<Layout title={`ホーム | ${import.meta.env.APP_NAME}`} description="ホーム">
	<div class="curtains">
		<Image src={HeaderImage} alt={import.meta.env.APP_NAME} class="header-img" />
	</div>
	<div class="app-title">
		<h1 class="title">
			<span>Shota Inoue</span>
			<span>Web Library</span>
		</h1>

		<ul class="buttons">
			<li class="button">
				<SvgButton
					svgIconPath={svgPaths.user}
					svgViewBox={svgViewBoxes.user}
					isLink={true}
					linkUrl="/profile"
				/>
			</li>
			<li class="button">
				<SvgButton
					svgIconPath={svgPaths.envelope}
					svgViewBox={svgViewBoxes.envelope}
					isLink={true}
					linkUrl="/contact"
				/>
			</li>
			<li class="button">
				<SvgButton
					svgIconPath={svgPaths.penNib}
					svgViewBox={svgViewBoxes.penNib}
					isLink={true}
					linkUrl="/blog"
					title="Blog"
					widthScale={2.8}
				/>
			</li>
		</ul>
	</div>
</Layout>

<script>
	// GSAP
	import { gsap } from "gsap";

	const headerImg = document.querySelector(".header-img");
	const title = document.querySelector(".title");
	const buttons = gsap.utils.toArray(".button");
	const curtains = document.querySelector(".curtains");

	const gradient = (target: any) => {
		const timeline = gsap.timeline({ repeat: -1 });
		timeline.to(target, {
			backgroundImage:
				"linear-gradient(1turn, rgb(251 191 36), rgb(251 146 60) 50%, rgb(251 113 133))",
			duration: 3,
		});

		return timeline;
	};

	gsap
		.timeline()
		.from(headerImg, {
			autoAlpha: 0,
			duration: 0.8,
			ease: "power3.out",
		})
		.to(headerImg, {
			autoAlpha: 0,
			duration: 0.5,
			delay: 0.3,
			ease: "power4.in",
		})
		.to(curtains, {
			yPercent: -100,
			duration: 1,
			delay: 0.2,
			ease: "power3.out",
		})
		.from(
			title,
			{
				autoAlpha: 0,
				duration: 0.7,
				ease: "power3.out",
			},
			"-=0.6"
		)
		.from(buttons, {
			autoAlpha: 0,
			yPercent: 30,
			duration: 1.2,
			ease: "power3.out",
			stagger: {
				each: 0.4,
			},
		})
		.add(gradient(title), "-=1.5");
</script>

<style scoped lang="scss">
	.curtains {
		overflow-y: hidden;
		position: absolute;
		top: 0;
		left: 0;
		width: 100vw;
		height: 100vh;
		background: $tropic-gradient;
		z-index: 300;

		.header-img {
			position: absolute;
			top: 50%;
			left: 50%;
			transform: translate(-50%, -50%);
			width: 128px;
			height: auto;
			object-fit: contain;
			border-radius: 16px;
			margin: auto;
			box-shadow: 8px 8px 8px $black;

			@include resp(lg) {
				width: 256px;
				height: auto;
				border-radius: 24px;
				box-shadow: 24px 24px 24px $black;
			}
		}
	}

	.app-title {
		width: max-content;
		position: fixed;
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);

		display: flex;
		flex-direction: column;
		gap: 3rem;

		@include resp(lg) {
			gap: 8rem;
		}

		.title {
			display: flex;
			flex-direction: column;
			align-items: center;
			gap: 1rem;

			font-size: 2.4rem;
			font-weight: 700;
			letter-spacing: 1.5px;
			background-image: $tropic-gradient-to-above;
			background-clip: text;
			-webkit-background-clip: text;
			-webkit-text-fill-color: transparent;

			@include resp(lg) {
				gap: 2.4rem;
				font-size: 5.6rem;
				letter-spacing: 6px;
			}
		}

		.buttons {
			display: flex;
			flex-direction: row;
			justify-content: center;
			align-items: center;
			gap: 0.8rem;

			@include resp(lg) {
				gap: 2.4rem;
			}

			.button {
				color: getColor(--text-secondary-color);
				fill: getColor(--text-secondary-color);
			}
		}
	}
</style>
