---
import ArticleLayout from "../../../layouts/ArticleLayout.astro";
import Toc from "../../../components/blog/article/Toc.astro";
import Metadata from "../../../components/blog/article/Metadata.astro";
// Newt
import { getArticles } from "../../../lib/newt/client";
import type { Article } from "../../../lib/newt/types";
// KaTeX
import "katex/dist/katex.min.css";
// Highlight.js
import hljs from "highlight.js";
import "../../../styles/syntax-highlight.scss";
// Cheerio
import { load } from "cheerio";
// SVG
import { svgPaths, svgViewBoxes } from "../../../lib/svg/paths";

// prerender config
export const getStaticPaths = async () => {
	const articles = await getArticles();

	if (!articles || articles.length <= 0) {
		return null;
	}

	return articles.map((article) => ({
		params: { slug: article.slug },
		props: { article },
	}));
};

interface Props {
	article: Article;
}

const { article } = Astro.props;

// Load Cheerio
const $ = load(article.content.data);

$("pre code").each((idx, elm) => {
	const className = $(elm).attr("class");
	const classList = className ? className.split(":") : [];
	const language = classList[0]?.replace("language-", "");
	const fileName = classList[1];

	let result;

	const code = $(elm).text();

	if (language) {
		try {
			result = hljs.highlight(code, { language });
		} catch {
			result = hljs.highlightAuto(code);
		}
	} else {
		result = hljs.highlightAuto(code);
	}

	$(elm)
		.parent()
		.before(`<div class="code-title"><label class="title">${fileName ?? ""}</label><button type="button" id="copy-btn-${idx}" class="copy-btn"><svg xmlns="http://www.w3.org/2000/svg" viewBox="${svgViewBoxes.copy}"><path d="${svgPaths.copy}" /></svg></button></div>`);

	$(elm).html(result.value);
});

// Table of contents
const headings: string[] = [];

$("h1,h2,h3").each((_, elm) => {
	const heading = $(elm).text();
	$(elm).attr("id", heading);
	headings.push(heading);
});

// Set HTML
article.content.data = $.html();
---

<ArticleLayout title={`${article.title} | ブログ | ${import.meta.env.APP_NAME}`} description={`${article.description}`} imageUrl={article.thambnail ? new URL(article.thambnail.src) : undefined}>
	<aside>
		<Metadata metadata={article} />
		<Toc headings={headings} />
	</aside>
	<article>
		<div set:html={article.content.data} class="article-content" />
	</article>
</ArticleLayout>

<script>
	import { load } from "cheerio";

	// Load Cheerio
	const $ = load(document.body.innerHTML);

	// Copy as code
	const copyToClipboard = async (code: string): Promise<void> => {
		await navigator.clipboard.writeText(code);
	};

	$("pre code").each((idx, elm) => {
		const code = $(elm).text();
		const copyBtn = document.getElementById(`copy-btn-${idx}`);

		copyBtn!.addEventListener("click", async () => {
			await copyToClipboard(code);
		});
	});
</script>

<style lang="scss">
	.copy-btn {
		&:active {
			animation: shake 1s ease;
		}

		@keyframes shake {
			0% {
				transform: translateX(0);
			}

			25% {
				transform: translateX(4px);
			}

			50% {
				transform: translateX(0);
			}

			75% {
				transform: translateX(-4px);
			}

			100% {
				transform: translateX(0);
			}
		}
	}
</style>
