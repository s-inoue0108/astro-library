---
import ArticleLayout from "../../../layouts/ArticleLayout.astro";
import Toc from "../../../components/blog/article/Toc.vue";
import Metadata from "../../../components/blog/article/Metadata.astro";
import ArticleCardCompact from "../../../components/blog/card/ArticleCardCompact.astro";
import SideArticle from "../../../components/blog/article/SideArticle.astro";
import NoContent from "../../../components/blog/background/NoContent.astro";
import ShareButtons from "../../../components/blog/article/ShareButtons.astro";

// Newt
import { articles } from "../../../lib/newt/instance";
import { getArticles } from "../../../lib/newt/client";
import { getSideArticlesBySlug } from "../../../lib/newt/func";
import type { Article } from "../../../lib/newt/types";

// KaTeX
import "katex/dist/katex.min.css";

// funcs
import {
	mathRenderer,
	anchorStylist,
	syntaxHighlighter,
	footnotesAdjuster,
	getHeadings,
	imgStylist,
	calloutStylist,
} from "../../../lib/cheerio/func";

// Highlight.js
import "../../../styles/syntax-highlight.scss";

// Cheerio
import { load } from "cheerio";
import AuthorData from "../../../components/blog/article/AuthorData.astro";
import PageTopButton from "../../../components/blog/article/PageTopButton.vue";

// prerender config
export const getStaticPaths = async () => {
	const articles = await getArticles();

	if (!articles || articles.length <= 0) {
		return null;
	}

	return articles.map((article) => ({
		params: { slug: article.slug },
		props: { article: article },
	}));
};

interface Props {
	article: Article;
}

// Props
const { article } = Astro.props;

// Render KaTeX
let mathRenderedHtml = await mathRenderer(article.content.data);

const $ = load(mathRenderedHtml);

// anchor link
await anchorStylist($);

// add figure tag
await imgStylist($);

// code block
await syntaxHighlighter($);

// styling callout
await calloutStylist($);

// exchange footnotes-sep to h1
await footnotesAdjuster($);

// Table of contents
const headings = await getHeadings($);

// Set HTML
mathRenderedHtml = $.html();

// Side articles
const sideArticles = await getSideArticlesBySlug(articles, article.slug);
---

<ArticleLayout
	title={`${article.title} | ブログ | ${import.meta.env.APP_NAME}`}
	description={`${article.description}`}
	imageUrl={article.thambnail ? new URL(article.thambnail.src) : undefined}
>
	<Metadata metadata={article} />
	<div id="content">
		<aside id="aside-content">
			<ShareButtons
				article={article}
				appName={import.meta.env.APP_NAME}
				appUrl={import.meta.env.APP_URL}
			/>
			<Toc headings={headings} client:load />
		</aside>
		<article id="article-content">
			<div set:html={mathRenderedHtml} class="article-content" />
			<h1 class="rel-articles content-h1" id="関連記事">関連記事</h1>
			<ul class="hit-articles">
				{
					article.relatedArticles && article.relatedArticles.length > 0 ? (
						article.relatedArticles.map((article) => {
							return (
								<li>
									<ArticleCardCompact article={article} />
								</li>
							);
						})
					) : (
						<NoContent message="記事がありません" />
					)
				}
			</ul>
			<AuthorData />
			<ul class="side-articles">
				<li class="prev-article">
					<SideArticle article={sideArticles.prev} direction="prev" />
				</li>
				<li class="next-article">
					<SideArticle article={sideArticles.next} direction="next" />
				</li>
			</ul>
		</article>
	</div>
	<PageTopButton client:only="vue" />
</ArticleLayout>

<script>
	// Copy btn
	import { load } from "cheerio";
	import { gsap } from "gsap";
	import { ScrollTrigger } from "gsap/ScrollTrigger";
	gsap.registerPlugin(ScrollTrigger);

	// Scroll anim on h1
	const h1s = gsap.utils.toArray(".content-h1");

	gsap.set(h1s, {
		width: 0,
		opacity: 0,
	});

	h1s.forEach((elm: any) => {
		gsap.to(elm, {
			ease: "expo.out",
			duration: 0.8,
			width: "100%",
			opacity: 1,
			scrollTrigger: {
				trigger: elm,
				toggleActions: "play reset restart reset",
			},
		});
	});

	// Load Cheerio
	const $ = load(document.body.innerHTML);

	// Copy as code
	const copyToClipboard = async (code: string): Promise<void> => {
		await navigator.clipboard.writeText(code);
	};

	$("pre code").each((idx, elm) => {
		const code = $(elm).text();
		const copyBtn = document.getElementById(`copy-btn-${idx}`);

		const copyAnim = gsap
			.timeline({ paused: true })
			.to(copyBtn, {
				scale: 1.2,
				x: -10,
				ease: "power4.out",
				duration: 0.1,
			})
			.to(copyBtn, {
				x: 10,
				ease: "power4.out",
				duration: 0.1,
			})
			.to(copyBtn, {
				x: 0,
				scale: 1,
				ease: "power4.out",
				duration: 0.1,
			});

		copyBtn!.addEventListener("click", async () => {
			await copyToClipboard(code);
			await copyAnim.restart();
		});
	});
</script>

<style lang="scss">
	#content {
		@include resp(lg) {
			display: flex;
			flex-direction: row-reverse;

			#article-content {
				position: relative;
				width: 75%;
				padding-right: 5rem;
			}

			#aside-content {
				position: relative;
				width: 25%;
				margin-top: -768px;
				height: max-content;
				position: sticky;
				top: 5rem;
			}
		}
	}

	.rel-articles {
		border-image: tropicGradient(90deg) 1;
		border-bottom: solid 4px;
		padding-left: 0.4rem;
		padding-bottom: 0.2rem;
		font-size: 1.2rem;
		font-weight: 700;
		letter-spacing: 1px;
		margin: 2.5rem 0;

		@include resp(sm) {
			font-size: 1.5rem;
		}

		@include resp(lg) {
			font-size: 2.2rem;
			padding-left: 0.8rem;
			padding-bottom: 0.3rem;
			border-bottom: solid 6px;
			margin: 5rem 0;
		}
	}

	.hit-articles {
		display: flex;
		flex-direction: column;
		align-items: center;
		gap: 1rem;
		width: 100%;
		margin: 2.5rem 0;

		@include resp(lg) {
			gap: 1.2rem;
			margin: 4rem 0;
		}

		li {
			width: 100%;
		}
	}

	.side-articles {
		width: 100%;
		height: calc(160px + 1rem);
		position: relative;
		margin-top: 3rem;

		@include resp(lg) {
			height: 92px;
		}

		.prev-article {
			display: block;
			width: 100%;
			position: absolute;
			bottom: 0;

			@include resp(lg) {
				left: calc(50% + 1rem);
				bottom: 0;
				z-index: 10;
			}
		}

		.next-article {
			display: block;
			width: 100%;
			position: absolute;
			bottom: calc(80px + 1rem);

			@include resp(lg) {
				left: 0;
				bottom: 0;
			}
		}
	}
</style>
