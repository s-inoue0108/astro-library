---
import Layout from "../../../layouts/Layout.astro";
import Toc from "../../../components/blog/article/Toc.vue";
// Newt
import { getArticles } from "../../../lib/newt/client";
import type { Article } from "../../../lib/newt/types";
// KaTeX
import "katex/dist/katex.min.css";
// Highlight.js
import hljs from "highlight.js";
import "../../../styles/syntax-highlight.scss";
// Cheerio
import { load } from "cheerio";
// SVG
import { svgPaths, svgViewBoxes } from "../../../lib/svg/paths";

// prerender config
export const getStaticPaths = async () => {
	const articles = await getArticles();

	if (!articles || articles.length <= 0) {
		return null;
	}

	return articles.map((article) => ({
		params: { slug: article.slug },
		props: { article },
	}));
};

interface Props {
	article: Article;
}

const { article } = Astro.props;

// Load Cheerio
const $ = load(article.content.data);

// Set Code and button
const codes: string[] = [];
const copyBtns: (HTMLElement | null)[] = [];

// Copy as code
const copyToClipboard = async (idx: number): Promise<void> => {
	await navigator.clipboard.writeText(codes[idx]);
};

$("pre code").each((idx, elm) => {
	const className = $(elm).attr("class");
	const classList = className ? className.split(":") : [];
	const language = classList[0]?.replace("language-", "");
	const fileName = classList[1];

	let result;

	const code = $(elm).text();
	codes.push(code);

	if (language) {
		try {
			result = hljs.highlight(code, { language });
		} catch {
			result = hljs.highlightAuto(code);
		}
	} else {
		result = hljs.highlightAuto(code);
	}

	const codeTitle = $(elm)
		.parent()
		.before(`<div class="code-title"><label class="title">${fileName ?? ""}</label><button type="button" id="copy-btn-${idx}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="${svgViewBoxes.copy}"><path d="${svgPaths.copy}" /></svg></button></div>`);

	// const copyBtn = document.getElementById(`copy-btn-${idx}`);
	// copyBtns.push(copyBtn);
	$(elm).html(result.value);
});

// Table of contents
const headings: string[] = [];

$("h1,h2,h3").each((_, elm) => {
	const heading = $(elm).text();
	headings.push(heading);
	$(elm).contents().wrap(`<a id="${heading}" href="#${heading}"></a>`);
});

// Set HTML
article.content.data = $.html();
---

<Layout title={`${article.title} | ブログ | ${import.meta.env.APP_NAME}`} description={`${article.description}`}>
	<Toc headings={headings} />
	<article set:html={article.content.data} />
</Layout>

<!-- <script>
// Set Code and button
const copyBtns: (HTMLElement | null)[] = [];

// Copy as code
const copyToClipboard = async (idx: number): Promise<void> => {
	await navigator.clipboard.writeText(codes[idx]);
};

$("pre code").each((idx, elm) => {

	let result;

	const code = $(elm).text();
	codes.push(code);
	const copyBtn = document.getElementById(`copy-btn-${idx}`);
	copyBtns.push(copyBtn);
});
</script> -->

<style lang="scss">
	.code-title {
		display: inline-flex;
		justify-content: space-between;
		align-items: center;

		svg {
			height: 16px;
			width: auto;
			fill: getColor(--text-secondary-color);
		}
	}
</style>
