---
import Layout from "../../../../layouts/Layout.astro";
import PageTitle from "../../../../components/blog/background/PageTitle.astro";
import CategoriesNavBar from "../../../../components/blog/background/CategoriesNavBar.astro";
import ArticleCards from "../../../../components/blog/large/ArticleCards.astro";
import TagsListModal from "../../../../components/common/modal/TagsListModal.vue";
import ArchivesListModal from "../../../../components/common/modal/ArchivesListModal.vue";
import Pager from "../../../../components/blog/background/Pager.vue";
import { articles, categories, tags } from "../../../../lib/newt/instance";
import { getArticles } from "../../../../lib/newt/client";
import type { Article } from "../../../../lib/newt/types";
import type { Page, GetStaticPathsOptions } from "astro";
import PageTitleForPc from "../../../../components/blog/background/PageTitleForPc.astro";
import { svgPaths, svgViewBoxes } from "../../../../lib/svg/paths";
import CategoriesListModal from "../../../../components/common/modal/CategoriesListModal.vue";

export const getStaticPaths = async ({
	paginate,
}: {
	paginate: GetStaticPathsOptions["paginate"];
}) => {
	const articles = await getArticles();

	if (!articles || articles.length <= 0) return;

	// publishedAtを取得
	const pubDates = articles.map((article) => {
		const pubDate = new Date(article._sys.raw.publishedAt);
		return {
			year: pubDate.getFullYear(),
			month: pubDate.getMonth() + 1,
		};
	});

	// uniqueな配列に成形
	const uniquePubDates = Array.from(
		new Map(pubDates.map((date) => [JSON.stringify(date), date])).values()
	);

	const routes = uniquePubDates.flatMap((date) => {
		const filteredArticles = articles.filter((article) => {
			return (
				new Date(article._sys.raw.publishedAt).getFullYear() === date.year &&
				new Date(article._sys.raw.publishedAt).getMonth() + 1 === date.month
			);
		});
		return paginate(filteredArticles, {
			params: { year: date.year.toString(), month: date.month.toString() },
			pageSize: 12,
			props: { year: date.year, month: date.month },
		});
	});
	return routes;
};

// Props
interface Props {
	page: Page<Article>;
	year: number;
	month: number;
}

const { page, year, month } = Astro.props;
---

<Layout
	title={`${year}年${month}月の記事一覧 | ページ${page.currentPage} | ブログ | ${import.meta.env.APP_NAME}`}
	description={`${year}年${month}月の記事一覧（ページ${page.currentPage}）`}
>
	<div id="contents">
		<section id="articles">
			<PageTitleForPc
				title={`${year}年${month}月`}
				svgIconPath={svgPaths.calendar}
				svgViewBox={svgViewBoxes.calendar}
				marginRem={2}
			/>
			<PageTitle
				title={`${year}年${month}月`}
				svgIconPath={svgPaths.calendar}
				svgViewBox={svgViewBoxes.calendar}
			/>
			<CategoriesNavBar />
			<ArticleCards articles={page.data} />
			<Pager page={page} />
		</section>
		<section id="sidebar">
			<CategoriesListModal categories={categories} tags={tags} articles={articles} client:visible />
			<TagsListModal categories={categories} tags={tags} client:visible />
			<ArchivesListModal articles={articles} client:visible />
		</section>
	</div>
</Layout>

<script>
	import { gsap } from "gsap";
	import { ScrollTrigger } from "gsap/ScrollTrigger";
	gsap.registerPlugin(ScrollTrigger);

	const cards = gsap.utils.toArray(".article-card");

	cards.forEach((elm: any) => {
		gsap.from(elm, {
			ease: "expo.out",
			duration: 1.5,
			xPercent: 50,
			autoAlpha: 0,
			overflowX: "hidden",
			scrollTrigger: {
				trigger: elm,
			},
		});
	});
</script>

<style lang="scss">
	#contents {
		@include resp(lg) {
			display: flex;
		}

		#articles {
			@include resp(lg) {
				width: 75%;
			}
		}

		#sidebar {
			@include resp(lg) {
				width: 25%;
				margin-top: -2rem;
			}
		}
	}
</style>
