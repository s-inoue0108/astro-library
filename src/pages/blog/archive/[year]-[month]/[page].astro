---
import Layout from "../../../../layouts/Layout.astro";
import PageTitle from "../../../../components/blog/background/PageTitle.astro";
import CategoriesNavBar from "../../../../components/blog/background/CategoriesNavBar.astro";
import ArticleCard from "../../../../components/blog/card/ArticleCard.astro";
import TagsListModal from "../../../../components/common/modal/TagsListModal.astro";
import Pager from "../../../../components/blog/background/Pager.vue";
import { getArticles } from "../../../../lib/newt/client";
import type { Article } from "../../../../lib/newt/types";
import type { Page, GetStaticPathsOptions } from "astro";

export const getStaticPaths = async ({ paginate }: { paginate: GetStaticPathsOptions["paginate"] }) => {
	const articles = await getArticles();

	if (!articles || articles.length <= 0) {
		return null;
	}

	// publishedAtを取得
	const pubDates = articles.map((article) => {
		const pubDate = new Date(article._sys.raw.publishedAt);
		return {
			year: pubDate.getFullYear(),
			month: pubDate.getMonth() + 1,
		};
	});

	// uniqueな配列に成形
	const uniquePubDates = Array.from(new Map(pubDates.map((date) => [JSON.stringify(date), date])).values());

	const routes = uniquePubDates.flatMap((date) => {
		const filteredArticles = articles.filter((article) => {
			return new Date(article._sys.raw.publishedAt).getFullYear() === date.year && new Date(article._sys.raw.publishedAt).getMonth() + 1 === date.month;
		});
		return paginate(filteredArticles, {
			params: { year: date.year.toString(), month: date.month.toString() },
			pageSize: 1,
			props: { year: date.year, month: date.month },
		});
	});
	return routes;
};

// Props
interface Props {
	page: Page<Article>;
	year: number;
	month: number;
}

const { page, year, month } = Astro.props;
---

<Layout title={`${year}年${month}月の記事一覧 | ページ${page.currentPage} | ブログ | ${import.meta.env.APP_NAME}`} description={`${year}年${month}月の記事一覧（ページ${page.currentPage}）`}>
	<PageTitle title={`${year}年${month}月`} />
	<CategoriesNavBar />
	<ul class="cards">
		{
			page.data && page.data.length !== 0 ? (
				page.data.map((article) => {
					return (
						<li class="article-card">
							<ArticleCard article={article} />
						</li>
					);
				})
			) : (
				<div>記事がありません</div>
			)
		}
	</ul>
	<Pager page={page} />
	<TagsListModal />
</Layout>

<style lang="scss">
	.cards {
		width: 100%;
		margin: auto;
		display: flex;
		flex-direction: column;
		gap: 1rem;

		@include resp(lg) {
			flex-direction: row;
			flex-wrap: wrap;
		}

		.article-card {
			width: 100%;
			height: 256px;

			@include resp(lg) {
				width: calc(50% - 0.5rem);
			}

			@include resp(xl) {
				width: calc(25% - 0.25rem - 8px);
			}
		}
	}
</style>
