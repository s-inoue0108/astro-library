---
export const prerender = false;

import ArticleLayout from "../../../layouts/ArticleLayout.astro";
import Toc from "../../../components/blog/article/Toc.astro";
import Metadata from "../../../components/blog/article/Metadata.astro";
import ArticleCardCompact from "../../../components/blog/card/ArticleCardCompact.vue";
import SideArticle from "../../../components/blog/article/SideArticle.astro";
import NoContent from "../../../components/blog/background/NoContent.astro";
// Newt
import { articles } from "../../../lib/newt/instance";
import { getPreviewBySlug } from "../../../lib/newt/client";
import { getSideArticlesBySlug } from "../../../lib/newt/func";
// KaTeX
import "katex/dist/katex.min.css";
import { mathRenderer } from "../../../lib/katex/render";
// Highlight.js
import hljs from "highlight.js";
import "../../../styles/syntax-highlight.scss";
// Cheerio
import { load } from "cheerio";
// SVG
import { svgPaths, svgViewBoxes } from "../../../lib/svg/paths";

// params
const { slug } = Astro.params;

// get preview
const article = await getPreviewBySlug(slug);

if (!article || !slug) {
	return Astro.redirect("/");
}

// KaTeX SSR
const mathRenderedHtml = mathRenderer(article.content.data);

// Load Cheerio
const $ = load(mathRenderedHtml);

// anchor link
$("a").each((_, elm) => {
	if (!$(elm).attr("href") || !/^#fn/.test($(elm).attr("href")!)) {
		$(elm).attr("target", "_blank").attr("rel", "noopener noreferrer");
		$(elm).append(`<svg xmlns="http://www.w3.org/2000/svg" viewBox="${svgViewBoxes.arrowUpRightFromSquare}"><path d="${svgPaths.arrowUpRightFromSquare}"></path></svg>`);
	}
});

// code block
$("pre code").each((idx, elm) => {
	const className = $(elm).attr("class");
	const classList = className ? className.split(":") : [];
	const language = classList[0]?.replace("language-", "");
	const fileName = classList[1];

	let result;

	const code = $(elm).text();

	if (language) {
		try {
			result = hljs.highlight(code, { language });
		} catch {
			result = hljs.highlightAuto(code);
		}
	} else {
		result = hljs.highlightAuto(code);
	}

	$(elm)
		.parent()
		.before(`<div class="code-title"><label class="title">${fileName ?? ""}</label><button type="button" id="copy-btn-${idx}" class="copy-btn"><svg xmlns="http://www.w3.org/2000/svg" viewBox="${svgViewBoxes.copy}"><path d="${svgPaths.copy}" /></svg></button></div>`);

	$(elm).html(result.value);
});

// Table of contents
const headings: string[] = [];

$("h1,h2,h3").each((_, elm) => {
	const heading = $(elm).text();
	$(elm).attr("id", heading);
	headings.push(heading);
});

// Set HTML
article.content.data = $.html();

// Side articles
const sideArticles = await getSideArticlesBySlug(articles, slug);
---

<ArticleLayout title={`${article.title} | プレビュー | ${import.meta.env.APP_NAME}`} description={`${article.description}`} imageUrl={article.thambnail ? new URL(article.thambnail.src) : undefined}>
	<aside class="aside-content">
		<Metadata metadata={article} />
		<Toc headings={headings} />
	</aside>
	<article class="article-content">
		<div set:html={article.content.data} />
	</article>
	<h1 class="rel-articles">関連記事</h1>
	<ul class="hit-articles">
		{
			article.relatedArticles && article.relatedArticles.length > 0 ? (
				article.relatedArticles.map((article) => {
					return (
						<li>
							<ArticleCardCompact article={article} />
						</li>
					);
				})
			) : (
				<NoContent message="記事がありません" />
			)
		}
	</ul>
	<SideArticle article={sideArticles.prev} direction="prev" />
	<SideArticle article={sideArticles.next} direction="next" />
</ArticleLayout>

<script>
	import { load } from "cheerio";

	// Load Cheerio
	const $ = load(document.body.innerHTML);

	// Copy as code
	const copyToClipboard = async (code: string): Promise<void> => {
		await navigator.clipboard.writeText(code);
	};

	$("pre code").each((idx, elm) => {
		const code = $(elm).text();
		const copyBtn = document.getElementById(`copy-btn-${idx}`);

		copyBtn!.addEventListener("click", async () => {
			await copyToClipboard(code);
		});
	});
</script>

<style lang="scss">
	.copy-btn {
		&:active {
			animation: shake 1s ease;
		}

		@keyframes shake {
			0% {
				transform: translateX(0);
			}

			25% {
				transform: translateX(4px);
			}

			50% {
				transform: translateX(0);
			}

			75% {
				transform: translateX(-4px);
			}

			100% {
				transform: translateX(0);
			}
		}
	}

	.rel-articles {
		border-image: $tropic-gradient 1;
		border-bottom: solid 4px;
		padding-left: 0.4rem;
		padding-bottom: 0.2rem;
		font-size: 1.2rem;
		font-weight: 700;
		letter-spacing: 1px;
		margin: 2.5rem 0;

		@include resp(sm) {
			font-size: 1.5rem;
		}

		@include resp(lg) {
			font-size: 2.2rem;
			padding-left: 0.8rem;
			padding-bottom: 0.3rem;
			border-bottom: solid 6px;
			margin: 5rem 0;
		}
	}

	.hit-articles {
		display: flex;
		flex-direction: column;
		align-items: center;
		gap: 0.7rem;
		width: 100%;
		margin: 2.5rem 0;

		li {
			width: 100%;
		}
	}
</style>
