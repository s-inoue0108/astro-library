---
export const prerender = false;

import ArticleLayout from "../../../layouts/ArticleLayout.astro";
import Toc from "../../../components/blog/article/Toc.vue";
import Metadata from "../../../components/blog/article/Metadata.astro";
import ArticleCardCompact from "../../../components/blog/card/ArticleCardCompact.vue";
import SideArticle from "../../../components/blog/article/SideArticle.astro";
import NoContent from "../../../components/blog/background/NoContent.astro";
import PreviewModeTab from "../../../components/blog/article/PreviewModeTab.vue";

// Newt
import { articles } from "../../../lib/newt/instance";
import { getPreviewBySlug } from "../../../lib/newt/client";
import { getSideArticlesBySlug } from "../../../lib/newt/func";

// KaTeX
import "katex/dist/katex.min.css";

// funcs
import {
	mathRenderer,
	anchorStylist,
	syntaxHighlighter,
	footnotesAdjuster,
	getHeadings,
} from "../../../lib/cheerio/func";

// Highlight.js
import "../../../styles/syntax-highlight.scss";

// Cheerio
import { load } from "cheerio";

// params
const { slug } = Astro.params;

// get preview
const article = await getPreviewBySlug(slug);

// validate secret and params existance
if (
	!article ||
	!slug ||
	!Astro.url.searchParams.get("secret") ||
	Astro.url.searchParams.get("secret") !== import.meta.env.NEWT_ARTICLE_PREVIEW_SECRET
) {
	return Astro.redirect("/");
}

// check typeof article.content
let rawHtml: string;
const content = article.content;
if ("raw" in content) {
	rawHtml = content.raw.htmlText;
} else {
	rawHtml = content.data;
}

// Render KaTeX
let mathRenderedHtml = await mathRenderer(rawHtml);

const $ = load(mathRenderedHtml);

// anchor link
await anchorStylist($);

// code block
await syntaxHighlighter($);

// exchange footnotes-sep to h1
await footnotesAdjuster($);

// Table of contents
const headings = await getHeadings($);

// Set HTML
mathRenderedHtml = $.html();

// Side articles
const sideArticles = await getSideArticlesBySlug(articles, slug);
---

<ArticleLayout
	title={`${article.title} | プレビュー | ${import.meta.env.APP_NAME}`}
	description={`${article.description}`}
	imageUrl={article.thambnail ? new URL(article.thambnail.src) : undefined}
>
	<Metadata metadata={article} />
	<div id="content">
		<aside id="aside-content">
			<div class="toc-side">
				<Toc headings={headings} client:load />
			</div>
		</aside>
		<article id="article-content">
			<div set:html={mathRenderedHtml} class="article-content" />
			<h1 class="rel-articles" id="関連記事">関連記事</h1>
			<ul class="hit-articles">
				{
					article.relatedArticles && article.relatedArticles.length > 0 ? (
						article.relatedArticles.map((article) => {
							return (
								<li>
									<ArticleCardCompact article={article} />
								</li>
							);
						})
					) : (
						<NoContent message="記事がありません" />
					)
				}
			</ul>
			<div class="side-articles">
				<SideArticle article={sideArticles.prev} direction="prev" />
				<SideArticle article={sideArticles.next} direction="next" />
			</div>
		</article>
	</div>
	<div id="preview-tab">
		<PreviewModeTab article={article} />
	</div>
</ArticleLayout>

<script>
	// Copy btn
	import { gsap } from "gsap";
	import { load } from "cheerio";

	// Load Cheerio
	const $ = load(document.body.innerHTML);

	// Copy as code
	const copyToClipboard = async (code: string): Promise<void> => {
		await navigator.clipboard.writeText(code);
	};

	$("pre code").each((idx, elm) => {
		const code = $(elm).text();
		const copyBtn = document.getElementById(`copy-btn-${idx}`);

		copyBtn!.addEventListener("click", async () => {
			await copyToClipboard(code);
		});
	});

	// preview tab
	const previewTab = document.getElementById("preview-tab");
	const closeBtn = document.getElementById("preview-tab-close-btn");

	gsap.from(previewTab, {
		y: 100,
		duration: 1.5,
		ease: "power1.inOut",
	});

	const openAnim = gsap.to(previewTab, {
		y: 0,
		duration: 0.5,
		ease: "power1.inOut",
		paused: true,
	});

	const closeAnim = gsap.to(previewTab, {
		y: 100,
		duration: 0.5,
		ease: "power1.inOut",
		paused: true,
	});

	let isOpen = true;
	closeBtn!.addEventListener("click", async () => {
		if (isOpen) {
			await closeAnim.restart();
		} else {
			await openAnim.restart();
		}
		isOpen = !isOpen;
	});

	// katex editor
	const katexEditor = document.getElementById("katex-editor");
	const katexEditorOpenBtn = document.getElementById("katex-editor-open-btn");
	const katexEditorCloseBtn = document.getElementById("katex-editor-close-btn");

	gsap.set(katexEditor, {
		autoAlpha: 0,
	});

	const openEditor = gsap.to(katexEditor, {
		y: -50,
		autoAlpha: 1,
		duration: 0.5,
		ease: "expo.inOut",
		paused: true,
	});

	const closeEditor = gsap.to(katexEditor, {
		y: 0,
		autoAlpha: 0,
		duration: 0.5,
		ease: "expo.inOut",
		paused: true,
	});

	let isOpenEditor = false;
	katexEditorOpenBtn!.addEventListener("click", async () => {
		document.querySelector("header")!.classList.add("blind");
		document.querySelector("footer")!.classList.add("blind");
		document.querySelector("main")!.classList.add("blind");
		await openEditor.restart();
		isOpenEditor = !isOpenEditor;
	});

	katexEditorCloseBtn!.addEventListener("click", async () => {
		document.querySelector("header")!.classList.remove("blind");
		document.querySelector("footer")!.classList.remove("blind");
		document.querySelector("main")!.classList.remove("blind");
		await closeEditor.restart();
		isOpenEditor = !isOpenEditor;
	});
</script>

<style lang="scss">
	#content {
		@include resp(lg) {
			display: flex;
			flex-direction: row-reverse;

			#article-content {
				width: 75%;
				padding-right: 5rem;
			}

			#aside-content {
				position: relative;
				width: 25%;
				margin-top: -768px;

				.toc-side {
					width: 100%;
					height: max-content;
					position: sticky;
					top: 96px;
				}
			}
		}
	}

	.copy-btn {
		&:active {
			animation: shake 1s ease;
		}

		@keyframes shake {
			0% {
				transform: translateX(0);
			}

			25% {
				transform: translateX(4px);
			}

			50% {
				transform: translateX(0);
			}

			75% {
				transform: translateX(-4px);
			}

			100% {
				transform: translateX(0);
			}
		}
	}

	.rel-articles {
		border-image: $tropic-gradient 1;
		border-bottom: solid 4px;
		padding-left: 0.4rem;
		padding-bottom: 0.2rem;
		font-size: 1.2rem;
		font-weight: 700;
		letter-spacing: 1px;
		margin: 2.5rem 0;

		@include resp(sm) {
			font-size: 1.5rem;
		}

		@include resp(lg) {
			font-size: 2.2rem;
			padding-left: 0.8rem;
			padding-bottom: 0.3rem;
			border-bottom: solid 6px;
			margin: 5rem 0;
		}
	}

	.hit-articles {
		display: flex;
		flex-direction: column;
		align-items: center;
		gap: 0.7rem;
		width: 100%;
		margin: 2.5rem 0;

		li {
			width: 100%;
		}
	}

	.side-articles {
		margin-top: 3rem;
		width: 100%;

		@include resp(lg) {
			display: flex;
			flex-direction: row-reverse;
			align-items: center;
			gap: 2rem;
		}
	}

	#preview-tab {
		width: 100%;
		height: 100px;
		position: fixed;
		left: 0;
		bottom: 0;
		z-index: 100;

		// display: none;

		// @include resp(lg) {
		// 	display: block;
		// }
	}
</style>
