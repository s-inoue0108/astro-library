---
// Server Side Rendering
export const prerender = false;

import Layout from "../../../layouts/Layout.astro";
import Toc from "../../../components/blog/article/Toc.vue";
// Newt
import { getArticles } from "../../../lib/newt/client";
import type { Article } from "../../../lib/newt/types";
// KaTeX
import "katex/dist/katex.min.css";
// Highlight.js
import hljs from "highlight.js";
import "highlight.js/styles/tokyo-night-dark.css";
// Cheerio
import { load } from "cheerio";

// prerender config
export const getStaticPaths = async () => {
	const articles = await getArticles();

	if (!articles || articles.length <= 0) {
		return null;
	}

	return articles.map((article) => ({
		params: { slug: article.slug },
		props: { article },
	}));
};

interface Props {
	article: Article;
}

const { article } = Astro.props;

// Load Cheerio
const $ = load(article.content.data);

$("pre code").each((_, elm) => {
	const className = $(elm).attr("class");
	const classList = className ? className.split(":") : [];
	const language = classList[0]?.replace("language-", "");
	const fileName = classList[1];

	let result;
	if (language) {
		try {
			result = hljs.highlight($(elm).text(), { language });
		} catch {
			result = hljs.highlightAuto($(elm).text());
		}
	} else {
		result = hljs.highlightAuto($(elm).text());
	}
	$(elm).html(result.value);

	if (fileName) {
		$(elm).parent().before(`<div><span>${fileName}</span></div>`);
	}
});

// Table of contents
const headings: string[] = [];

$("h1,h2,h3").each((_, elm) => {
	const heading = $(elm).text();
	headings.push(heading);
	$(elm).contents().wrap(`<a id="${heading}" href="#${heading}"></a>`);
});

// Set HTML
article.content.data = $.html();
---

<Layout title={`${article!.title} | ブログ | ${import.meta.env.APP_NAME}`} description={`${article.description}`}>
	<Toc headings={headings} />
	<article set:html={article!.content.data} />
</Layout>
