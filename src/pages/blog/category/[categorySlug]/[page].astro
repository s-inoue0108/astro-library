---
import Layout from "../../../../layouts/Layout.astro";
import PageTitle from "../../../../components/blog/background/PageTitle.astro";
import CategoriesNavBar from "../../../../components/blog/background/CategoriesNavBar.astro";
import ArticleCard from "../../../../components/blog/card/ArticleCard.astro";
import TagsListModal from "../../../../components/common/modal/TagsListModal.astro";
import Pager from "../../../../components/blog/background/Pager.vue";
import NoContent from "../../../../components/blog/background/NoContent.astro";
import { getArticles, getCategories } from "../../../../lib/newt/client";
import type { Article, Category } from "../../../../lib/newt/types";
import type { Page, GetStaticPathsOptions } from "astro";

export const getStaticPaths = async ({ paginate }: { paginate: GetStaticPathsOptions["paginate"] }) => {
	const categories = await getCategories();
	const articles = await getArticles();

	if (!categories || !articles || articles.length <= 0) {
		return null;
	}

	const routes = categories.flatMap((category) => {
		const filteredArticles = articles.filter((article) => {
			return article.category.slug === category.slug;
		});
		return paginate(filteredArticles, {
			params: { categorySlug: category.slug },
			pageSize: 1,
			props: { category: category },
		});
	});
	return routes;
};

// Props
interface Props {
	page: Page<Article>;
	category: Category;
}

const { page, category } = Astro.props;
---

<Layout title={`${category.name}の記事一覧 | ページ${page.currentPage} | ブログ | ${import.meta.env.APP_NAME}`} description={category.description ?? ""}>
	<PageTitle title={category.name} bgImage={category.image} />
	<CategoriesNavBar />
	<ul class="cards">
		{
			page.data && page.data.length !== 0 ? (
				page.data.map((article) => {
					return <ArticleCard article={article} />;
				})
			) : (
				<NoContent message="記事がありません" />
			)
		}
	</ul>
	<Pager page={page} />
	<TagsListModal />
</Layout>

<style lang="scss">
	.cards {
		width: 100%;
		margin: auto;
		display: flex;
		flex-direction: column;
		gap: 1rem;

		@include resp(lg) {
			flex-direction: row;
			flex-wrap: wrap;
		}
	}
</style>
