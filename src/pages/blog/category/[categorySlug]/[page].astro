---
import Layout from "../../../../layouts/Layout.astro";
import PageTitle from "../../../../components/blog/background/PageTitle.astro";
import CategoriesNavBar from "../../../../components/blog/background/CategoriesNavBar.astro";
import ArticleCard from "../../../../components/blog/card/ArticleCard.astro";
import Modal from "../../../../components/common/modal/ToggleableModal.vue";
import TagCard from "../../../../components/blog/card/TagCard.vue";
import { getArticles, getCategories, getTags } from "../../../../lib/newt/client";
import type { Article, Category } from "../../../../lib/newt/types";
import type { Page, GetStaticPathsOptions } from "astro";
import { svgPaths } from "../../../../lib/svg/paths";

export const getStaticPaths = async ({ paginate }: { paginate: GetStaticPathsOptions["paginate"] }) => {
	const categories = await getCategories();
	const categorySlugs = categories.map((category) => category.slug);

	const articles = await getArticles(1000);

	const returnArr = categorySlugs.flatMap((categorySlug) => {
		const filteredArticles = articles.filter((article) => {
			return article.category.slug === categorySlug;
		});
		return paginate(filteredArticles, {
			params: { categorySlug: categorySlug },
			pageSize: 10,
			props: { category: categories.find((category: Category) => category.slug === categorySlug)! },
		});
	});

	return returnArr;
};

const tags = await getTags();

// Route params
// const { categorySlug }: { categorySlug: Category["slug"] } = Astro.params;

// Props
interface Props {
	page: Page<Article>;
	category: Category;
}

const { page, category } = Astro.props;
---

<Layout title={`${category.name}の記事一覧 | ブログ | ${import.meta.env.APP_NAME}`} description={`カテゴリ "${category.name}" の記事一覧です`}>
	<PageTitle title={category.name} bgImage={category.image} />
	<CategoriesNavBar />
	<ul class="cards">
		{
			page.data && page.data.length !== 0 ? (
				page.data.map((article) => {
					return <ArticleCard article={article} />;
				})
			) : (
				<div>記事がありません</div>
			)
		}
	</ul>
	<Modal title="タグ" svgIconPath={svgPaths.tags} client:visible>
		<ul class="tags">
			{
				tags.map((tag) => {
					return <TagCard tag={tag} />;
				})
			}
		</ul>
	</Modal>
</Layout>

<style lang="scss">
	.cards {
		width: 100%;
		margin: auto;
		display: flex;
		flex-direction: column;
		gap: 1rem;

		@include resp(lg) {
			flex-direction: row;
			flex-wrap: wrap;
		}
	}

	.tags {
		display: flex;
		flex-wrap: wrap;
		align-items: center;
		gap: 0.3rem;
	}
</style>
